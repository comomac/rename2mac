#!/usr/bin/env ruby
#encoding: utf-8

#
# Rename folderful of filenames to Mac OS X supported format (UTF8-MAC). Mac OS X use only.
# Mac Ma comomac (at) runbox (dot) com   (c) Copyright 2013
# License MIT
#

if RUBY_VERSION <= '1.9'
	puts 'Require Ruby 1.9 or above.'
	exit
end

unless RbConfig::CONFIG['host_os'] =~ /darwin/
	puts 'For Mac OS X only.'
	exit
end

require 'find'
require 'fileutils'
require 'term/ansicolor'

include Term::ANSIColor

class String
	def to_m
		# convert string to UTF8-MAC format
		self.encode('UTF8-MAC', 'UTF-8')

		# convert with extra function of replace invalid character to null
		#self.encode('UTF8-MAC', 'UTF-8', invalid: :replace, undef: :replace, replace: '')
	end

	def to_u
		# convert string to UTF-8 format
		self.encode('UTF-8', 'UTF8-MAC')

		# convert with extra function of replace invalid character to null
		#self.encode('UTF-8', 'UTF8-MAC', invalid: :replace, undef: :replace, replace: '')
	end

	def dn
		File.dirname( self )
	end

	def bn
		File.basename( self )
	end

	def um_different?
		# return if the string is different when converted to UTF8-MAC format
		self.unpack('H*') != self.to_m.unpack('H*')
	end

	def print_diff
		# highlight the character that is not UTF8-MAC compatible
		print self.dn + '/'
		self.bn.each_char { |c|
			if c.um_different?
				print c.red.bold
			else
				print c
			end
		}
		puts
	end
end

def Dir.restricted?( dir, excludes=[] )
	rdirs = [
		'.Trash', '.Trashes', '.fseventsd', '.Spotlight-V100', '.DocumentRevisions-V100',
		'.$EXTEND',
		'_SYNCAPP',
		'Corrupted',
		'System Volume Information', 'RECYCLER',
		'.sparsebundle',
		'.tmpdir', '.tmp7z',
		'.AppleDouble'
	]

	for word in rdirs - excludes
	    return true if dir.include?( word )
    end
    return false
end

if ARGV.length == 0
	puts "no dir specified.."
	exit
else
	if ARGV[0] == '-n'
		# -n argument will show what files/folders will be changed, without making changes
		noop = true
		src_dir = File.expand_path(ARGV[1])
	else
		noop = false
		src_dir = File.expand_path(ARGV[0])
	end

	unless FileTest.directory?( src_dir )
		puts "dir don't exists. #{src_dir}"
		exit
	end
end

total_success = 0 # success rename counter
total_fail = 0 # fail rename counter

# repeat if discover some success, because new files might be discovered
total_files = 0
flag = true
while flag
	total_files = 0
	flag = false

	Find.find( src_dir ) {|fullpath|
		# skip files and folders that shouldn't be touched
		Find.prune if Dir.restricted?( fullpath )
		next if fullpath.bn[0..0] == '.'

		total_files += 1

		# Unicode of the file
		u = fullpath.bn.unpack('H*')
		# UTF8-MAC code of the file
		m = fullpath.bn.to_m.unpack('H*')

		if u == m
			# file name compatible with UTF8-MAC
			#puts fullpath.bn.green
		else
			# file name incompatible with UTF8-MAC

			if FileTest.directory?(fullpath) or FileTest.file?(fullpath)
				# rename directory or file
				begin
					# tell program to restart the rename from beginning after finish, because some files maybe revealed after rename
					FileUtils.mv(fullpath, fullpath.dn.to_m + '/' + fullpath.bn.to_m, :noop => noop)
					fullpath.print_diff
					total_success += 1
					flag = true
				rescue => e
					print 'failed:  '
					fullpath.print_diff
					p e.exception
					puts e.backtrace.join("\n\t")
					total_fail+=1
				end
			end
		end
	}
end

puts "Found #{total_files} files, diff filename #{total_success + total_fail}"
puts "Renamed: #{total_success}      Failed: #{total_fail}"
