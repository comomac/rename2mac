#!/usr/bin/env ruby
#encoding: utf-8

#
# Rename folderful of filenames to Mac OS X supported format (UTF8-MAC). Mac OS X use only.
# Mac Ma  comomac (at) runbox (dot) com   (c) Copyright 2013
# License MIT
#

if RUBY_VERSION <= '1.9'
	puts 'Require Ruby 1.9 or above.'
	exit
end

unless RbConfig::CONFIG['host_os'] =~ /darwin/
	puts 'For Mac OS X only.'
	exit
end

require 'getoptlong'
require 'fileutils'
require 'rename2mac/libs'
require 'term/ansicolor'

include Term::ANSIColor


def show_help
	puts \
%Q{Usage:
rename2mac.rb [arguments] <dir>

Arguments:
--noop       -n  Make no changes
--local      -l  Scan local directory only, do not scan recursively.
--force      -f  Force overwrite existing file if it exists
--quiet      -q  Do not output individual results to screen
--help       -h  Display current help message}
end



opts = GetoptLong.new(
	[ '--noop',      '-n', GetoptLong::NO_ARGUMENT ],
	[ '--local',     '-l', GetoptLong::NO_ARGUMENT ],
	[ '--force',     '-f', GetoptLong::NO_ARGUMENT ],
	[ '--quiet',     '-q', GetoptLong::NO_ARGUMENT ],
	[ '--help',      '-h', GetoptLong::NO_ARGUMENT ]
)

recursive = true
noop = force = quiet = false

opts.each do |opt, arg|
	noop = true		  if opt == '--noop'
	recursive = false if opt == '--local'
	force = true 	  if opt == '--force'
	quiet = true	  if opt == '--quiet'

	if opt == '--help'
		show_help
		exit
	end
end


if ARGV.length == 0
	show_help
	exit
else
	src_dir = File.expand_path(ARGV[0])

	unless FileTest.directory?( src_dir )
		puts "Dir don't exists. #{src_dir}"
		exit
	end
end


total_success = 0 # success rename counter
total_fail = 0 # fail rename counter

# set wildcard if recursive or not
if recursive
	wildcard = '/**/*'
else
	wildcard = '/*'
end

# repeat if discover some success, because new files might be discovered
total_files = 0
flag = true
while flag
	total_files = 0
	flag = false

	Dir.glob(File.expand_path(src_dir).glob_escape + wildcard).delete_if { |fullpath|
		Dir.restricted?( fullpath )
	}.each { |fullpath|
		next if fullpath.bn[0..0] == '.'

		total_files += 1

		# Unicode of the file
		u = fullpath.bn.unpack('H*')
		# UTF8-MAC code of the file
		m = fullpath.bn.to_m.unpack('H*')

		if u == m
			# file name compatible with UTF8-MAC
			#puts fullpath.bn.green
		else
			# file name incompatible with UTF8-MAC

			if FileTest.directory?(fullpath) or FileTest.file?(fullpath)
				# rename directory or file
				begin
					# tell program to restart the rename from beginning after finish, because some files maybe revealed after rename
					FileUtils.mv(fullpath, fullpath.dn.to_m + '/' + fullpath.bn.to_m, :noop => noop, :force => force)
					fullpath.print_diff unless quiet
					total_success += 1
					flag = true unless noop
				rescue => e
					print 'failed:  '
					fullpath.print_diff
					p e.exception
					puts e.backtrace.join("\n\t")
					total_fail+=1
				end
			end
		end
	}
end

puts "Found #{total_files} files, diff filename #{total_success + total_fail}"
puts "Renamed: #{total_success}      Failed: #{total_fail}"
